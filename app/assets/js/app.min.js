/*!
 * Coding101
 * Coding101 is a guide for people that want to learn how to code
 * https://github.com/devcenter-square/coding101
 * @author Devcenter
 * @version 0.0.1
 * Copyright 2017. MIT licensed.
 */
function generateUUID(){var e=(new Date).getTime(),t="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var s=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"==t?s:3&s|8).toString(16)});return t}var config={apiKey:"AIzaSyA6mwwrGZLXTrPZcotadbPla7MfSNRyvU8",authDomain:"coding101-e7ef0.firebaseapp.com",databaseURL:"https://coding101-e7ef0.firebaseio.com",storageBucket:"coding101-e7ef0.appspot.com"};firebase.initializeApp(config);var db={tracks:firebase.database().ref("tracks"),resources:firebase.database().ref("resources"),questions:firebase.database().ref("questions"),answers:firebase.database().ref("answers")},trackList={template:"#TrackList",data:function(){return{tracks:[]}},watch:{$route:"fetchData"},created:function(){this.fetchData()},methods:{fetchData:function(){var e=this;db.tracks.once("value",function(t){function s(t){db.resources.orderByChild("track").equalTo(t.slug).once("value",function(s){t.resources=s.val()||{},e.tracks.push(t)})}var a=t.val();for(var n in a)s(a[n])})}}},newTrack={template:"#Track",data:function(){return{track:{},resources:[{}]}},methods:{addResource:function(){this.resources.push({})},removeResource:function(e){this.resources.splice(e,1)},save:function(){for(this.track.slug=generateUUID(),db.tracks.child(this.track.slug).set({name:this.track.name,slug:this.track.slug,details:this.track.details}),i=0;i<this.resources.length;i++){var e=db.resources.push();e.set({track:this.track.slug,url:this.resources[i].url})}this.$router.push("/")}}},editTrack={template:"#Track",data:function(){return{track:{},resources:{}}},beforeRouteEnter:function(e,t,s){db.tracks.child(e.params.slug).once("value",function(t){null===t.val()?s(!1):db.resources.orderByChild("track").equalTo(e.params.slug).once("value",function(e){s(function(s){s.track=t.val(),s.resources=e.val()})})})},watch:{$route:"fetchData"},methods:{fetchData:function(){var e=this;db.tracks.child(this.$route.params.slug).once("value",function(t){null===t.val()?router.push("/404"):db.resources.orderByChild("track").equalTo(this.$route.params.slug).once("value",function(s){e.track=t.val(),e.resources=s.val()})})},addResource:function(){var e=this,t={track:this.track.slug};db.resources.push(t).then(function(s){e.resources=e.resources||{},Vue.set(e.resources,s.key,t)})},removeResource:function(e){var t=this;db.resources.child(e).remove().then(function(){Vue["delete"](t.resources,e)})},saveResource:function(e,t){db.resources.child(e).update({url:t.url})},save:function(){db.tracks.child(this.$route.params.slug).update({name:this.track.name,details:this.track.details}),this.$router.push("/")}}},questionList={template:"#QuestionList",data:function(){return{questions:[]}},watch:{$route:"fetchData"},created:function(){this.fetchData()},methods:{fetchData:function(){var e=this;db.questions.once("value",function(t){function s(t){db.answers.orderByChild("question").equalTo(t.slug).once("value",function(s){t.answers=s.val()||{},e.questions.push(t)})}var a=t.val();for(var n in a)s(a[n])})}}},newQuestion={template:"#Question",data:function(){return{question:{},answers:[{}]}},methods:{addAnswer:function(){this.answers.push({})},removeAnswer:function(e){this.answers.splice(e,1)},save:function(){for(this.question.slug=generateUUID(),db.questions.child(this.question.slug).set({description:this.question.description,slug:this.question.slug}),i=0;i<this.answers.length;i++){var e=db.answers.push();e.set({question:this.question.slug,description:this.answers[i].description,tracks:this.answers[i].tracks})}this.$router.push("/questions")}}},editQuestion={template:"#Question",data:function(){return{question:{},answers:{}}},beforeRouteEnter:function(e,t,s){db.questions.child(e.params.slug).once("value",function(t){null===t.val()?s(!1):db.answers.orderByChild("question").equalTo(e.params.slug).once("value",function(e){s(function(s){s.question=t.val(),s.answers=e.val()})})})},watch:{$route:"fetchData"},methods:{fetchData:function(){var e=this;db.questions.child(this.$route.params.slug).once("value",function(t){null===t.val()?router.push("/404"):db.answers.orderByChild("question").equalTo(this.$route.params.slug).once("value",function(s){e.question=t.val(),e.answers=s.val()})})},addAnswer:function(){var e=this,t={question:this.question.slug};db.answers.push(t).then(function(s){e.answers=e.answers||{},Vue.set(e.answers,s.key,t)})},removeAnswer:function(e){var t=this;db.answers.child(e).remove().then(function(){Vue["delete"](t.answers,e)})},save:function(){var e=this;db.questions.child(this.$route.params.slug).update({description:e.question.description}).then(function(){for(index in e.answers){var t=e.answers[index];db.answers.child(index).update({description:t.description,tracks:t.tracks})}e.$router.push("/questions")})}}};Vue.component("selectize-vue",{template:'<input class="form-control u-full-width select-tracks" v-bind:value="value" placeholder="Add track" type="text" required>',props:["value"],created:function(){var e=this;db.tracks.once("value",function(t){var s=[];for(i in t.val())s.push(t.val()[i]);$(e.$el).selectize({persist:!1,maxItems:null,valueField:"slug",labelField:"name",searchField:["name","details"],options:s,onChange:function(t){e.$emit("input",t)}})})}});var notFound={template:"#NotFound"},router=new VueRouter({routes:[{name:"home",path:"/",redirect:"/tracks"},{name:"trackList",path:"/tracks",component:trackList},{name:"newTrack",path:"/tracks/new",component:newTrack},{name:"editTrack",path:"/tracks/:slug",component:editTrack},{name:"questionList",path:"/questions",component:questionList},{name:"newQuestion",path:"/questions/new",component:newQuestion},{name:"editQuestion",path:"/questions/:slug",component:editQuestion},{name:"404",path:"/404",component:notFound}]}),app=new Vue({router:router}).$mount("#app");
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJnZW5lcmF0ZVVVSUQiLCJkIiwiRGF0ZSIsImdldFRpbWUiLCJ1dWlkIiwicmVwbGFjZSIsImMiLCJyIiwiTWF0aCIsInJhbmRvbSIsImZsb29yIiwidG9TdHJpbmciLCJjb25maWciLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJzdG9yYWdlQnVja2V0IiwiZmlyZWJhc2UiLCJpbml0aWFsaXplQXBwIiwiZGIiLCJ0cmFja3MiLCJkYXRhYmFzZSIsInJlZiIsInJlc291cmNlcyIsInF1ZXN0aW9ucyIsImFuc3dlcnMiLCJ0cmFja0xpc3QiLCJ0ZW1wbGF0ZSIsImRhdGEiLCJ3YXRjaCIsIiRyb3V0ZSIsImNyZWF0ZWQiLCJ0aGlzIiwiZmV0Y2hEYXRhIiwibWV0aG9kcyIsInNlbGYiLCJvbmNlIiwic25hcHNob3QiLCJmZXRjaFJlc291cmNlcyIsInRyYWNrIiwib3JkZXJCeUNoaWxkIiwiZXF1YWxUbyIsInNsdWciLCJ2YWwiLCJwdXNoIiwiaSIsIm5ld1RyYWNrIiwiYWRkUmVzb3VyY2UiLCJyZW1vdmVSZXNvdXJjZSIsImluZGV4Iiwic3BsaWNlIiwic2F2ZSIsImNoaWxkIiwic2V0IiwibmFtZSIsImRldGFpbHMiLCJsZW5ndGgiLCJfbmV3UmVzb3VyY2UiLCJ1cmwiLCIkcm91dGVyIiwiZWRpdFRyYWNrIiwiYmVmb3JlUm91dGVFbnRlciIsInRvIiwiZnJvbSIsIm5leHQiLCJwYXJhbXMiLCJyb3V0ZXIiLCJ0aGVuIiwiVnVlIiwia2V5IiwicmVtb3ZlIiwic2F2ZVJlc291cmNlIiwicmVzb3VyY2UiLCJ1cGRhdGUiLCJxdWVzdGlvbkxpc3QiLCJmZXRjaEFuc3dlcnMiLCJxdWVzdGlvbiIsIm5ld1F1ZXN0aW9uIiwiYWRkQW5zd2VyIiwicmVtb3ZlQW5zd2VyIiwiZGVzY3JpcHRpb24iLCJfbmV3QW5zd2VyIiwiZWRpdFF1ZXN0aW9uIiwiX2Fuc3dlciIsImNvbXBvbmVudCIsInByb3BzIiwiJCIsIiRlbCIsInNlbGVjdGl6ZSIsInBlcnNpc3QiLCJtYXhJdGVtcyIsInZhbHVlRmllbGQiLCJsYWJlbEZpZWxkIiwic2VhcmNoRmllbGQiLCJvcHRpb25zIiwib25DaGFuZ2UiLCJ2YWx1ZSIsIiRlbWl0Iiwibm90Rm91bmQiLCJWdWVSb3V0ZXIiLCJyb3V0ZXMiLCJwYXRoIiwicmVkaXJlY3QiLCJhcHAiLCIkbW91bnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBNFdBLFFBQUFBLGdCQUNBLEdBQUFDLElBQUEsR0FBQUMsT0FBQUMsVUFDQUMsRUFBQSx1Q0FBQUMsUUFBQSxRQUFBLFNBQUFDLEdBQ0EsR0FBQUMsSUFBQU4sRUFBQSxHQUFBTyxLQUFBQyxVQUFBLEdBQUEsQ0FFQSxPQURBUixHQUFBTyxLQUFBRSxNQUFBVCxFQUFBLEtBQ0EsS0FBQUssRUFBQUMsRUFBQSxFQUFBQSxFQUFBLEdBQUFJLFNBQUEsS0FFQSxPQUFBUCxHQTlXQSxHQUFBUSxTQUNBQyxPQUFBLDBDQUNBQyxXQUFBLGtDQUNBQyxZQUFBLHlDQUNBQyxjQUFBLDhCQUdBQyxVQUFBQyxjQUFBTixPQUVBLElBQUFPLEtBQ0FDLE9BQUFILFNBQUFJLFdBQUFDLElBQUEsVUFDQUMsVUFBQU4sU0FBQUksV0FBQUMsSUFBQSxhQUNBRSxVQUFBUCxTQUFBSSxXQUFBQyxJQUFBLGFBQ0FHLFFBQUFSLFNBQUFJLFdBQUFDLElBQUEsWUFLQUksV0FDQUMsU0FBQSxhQUNBQyxLQUFBLFdBQ0EsT0FDQVIsWUFHQVMsT0FDQUMsT0FBQSxhQUVBQyxRQUFBLFdBQ0FDLEtBQUFDLGFBRUFDLFNBQ0FELFVBQUEsV0FDQSxHQUFBRSxHQUFBSCxJQUNBYixJQUFBQyxPQUFBZ0IsS0FBQSxRQUFBLFNBQUFDLEdBT0EsUUFBQUMsR0FBQUMsR0FDQXBCLEdBQUFJLFVBQUFpQixhQUFBLFNBQUFDLFFBQUFGLEVBQUFHLE1BQUFOLEtBQUEsUUFBQSxTQUFBQyxHQUNBRSxFQUFBaEIsVUFBQWMsRUFBQU0sVUFDQVIsRUFBQWYsT0FBQXdCLEtBQUFMLEtB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RCxPQUFBK0QsRUFBQS9ELFNBSUFlLEVBQUF3QixRQUFBZixLQUFBLGtCQU1Bd0IsS0FBQWdCLFVBQUEsaUJBQ0F6RCxTQUFBLDRIQUNBMEQsT0FBQSxTQUNBdEQsUUFBQSxXQUNBLEdBQUFJLEdBQUFILElBQ0FiLElBQUFDLE9BQUFnQixLQUFBLFFBQUEsU0FBQUMsR0FDQSxHQUFBakIsS0FDQSxLQUFBeUIsSUFBQVIsR0FBQU0sTUFDQXZCLEVBQUF3QixLQUFBUCxFQUFBTSxNQUFBRSxHQUVBeUMsR0FBQW5ELEVBQUFvRCxLQUFBQyxXQUNBQyxTQUFBLEVBQ0FDLFNBQUEsS0FDQUMsV0FBQSxPQUNBQyxXQUFBLE9BQ0FDLGFBQUEsT0FBQSxXQUNBQyxRQUFBMUUsRUFDQTJFLFNBQUEsU0FBQUMsR0FDQTdELEVBQUE4RCxNQUFBLFFBQUFELFVBUUEsSUFBQUUsV0FDQXZFLFNBQUEsYUFLQXVDLE9BQUEsR0FBQWlDLFlBQ0FDLFNBQ0E5QyxLQUFBLE9BQUErQyxLQUFBLElBQUFDLFNBQUEsWUFDQWhELEtBQUEsWUFBQStDLEtBQUEsVUFBQWpCLFVBQUExRCxZQUNBNEIsS0FBQSxXQUFBK0MsS0FBQSxjQUFBakIsVUFBQXRDLFdBQ0FRLEtBQUEsWUFBQStDLEtBQUEsZ0JBQUFqQixVQUFBeEIsWUFDQU4sS0FBQSxlQUFBK0MsS0FBQSxhQUFBakIsVUFBQVYsZUFDQXBCLEtBQUEsY0FBQStDLEtBQUEsaUJBQUFqQixVQUFBUCxjQUNBdkIsS0FBQSxlQUFBK0MsS0FBQSxtQkFBQWpCLFVBQUFGLGVBQ0E1QixLQUFBLE1BQUErQyxLQUFBLE9BQUFqQixVQUFBYyxhQU1BSyxJQUFBLEdBQUFuQyxNQUFBRixPQUFBQSxTQUFBc0MsT0FBQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gYXBwLmpzIHdpbGwgYmUgdGhlIGphdmFzY3JpcHQgZmlsZVxuLy8gZm9yIHRoZSBtYWluIGFwcCBmdW5jdGlvbnMgKG5vbi1kb20pXG5cbi8vIEluaXRpYWxpemUgRmlyZWJhc2VcblxudmFyIGNvbmZpZyA9IHtcbiAgICBhcGlLZXk6IFwiQUl6YVN5QTZtd3dyR1pMWFRyUFpjb3RhZGJQbGE3TWZTTlJ5dlU4XCIsXG4gICAgYXV0aERvbWFpbjogXCJjb2RpbmcxMDEtZTdlZjAuZmlyZWJhc2VhcHAuY29tXCIsXG4gICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9jb2RpbmcxMDEtZTdlZjAuZmlyZWJhc2Vpby5jb21cIixcbiAgICBzdG9yYWdlQnVja2V0OiBcImNvZGluZzEwMS1lN2VmMC5hcHBzcG90LmNvbVwiXG59O1xuXG5maXJlYmFzZS5pbml0aWFsaXplQXBwKGNvbmZpZyk7XG5cbnZhciBkYiA9IHtcbiAgICB0cmFja3M6IGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCd0cmFja3MnKSxcbiAgICByZXNvdXJjZXM6IGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdyZXNvdXJjZXMnKSxcbiAgICBxdWVzdGlvbnM6IGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdxdWVzdGlvbnMnKSxcbiAgICBhbnN3ZXJzOiBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZignYW5zd2VycycpXG59XG5cbi8vIENvbXBvbmVudHNcblxudmFyIHRyYWNrTGlzdCA9IHtcbiAgICB0ZW1wbGF0ZTogJyNUcmFja0xpc3QnLFxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHJhY2tzOiBbXVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgICAgJyRyb3V0ZSc6ICdmZXRjaERhdGEnXG4gICAgfSxcbiAgICBjcmVhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5mZXRjaERhdGEoKVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBmZXRjaERhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgZGIudHJhY2tzLm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhY2tzID0gc25hcHNob3QudmFsKCk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIHRyYWNrcykge1xuICAgICAgICAgICAgICAgICAgICBmZXRjaFJlc291cmNlcyh0cmFja3NbaV0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZldGNoUmVzb3VyY2VzKHRyYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGRiLnJlc291cmNlcy5vcmRlckJ5Q2hpbGQoJ3RyYWNrJykuZXF1YWxUbyh0cmFjay5zbHVnKS5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFjay5yZXNvdXJjZXMgPSBzbmFwc2hvdC52YWwoKSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudHJhY2tzLnB1c2godHJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIG5ld1RyYWNrID0ge1xuICAgIHRlbXBsYXRlOiAnI1RyYWNrJyxcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRyYWNrOiB7fSxcbiAgICAgICAgICAgIHJlc291cmNlczogW3t9XVxuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFkZFJlc291cmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzLnB1c2goe30pO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVSZXNvdXJjZTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNhdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy50cmFjay5zbHVnID0gZ2VuZXJhdGVVVUlEKCk7XG5cbiAgICAgICAgICAgIGRiLnRyYWNrcy5jaGlsZCh0aGlzLnRyYWNrLnNsdWcpLnNldCh7XG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy50cmFjay5uYW1lLFxuICAgICAgICAgICAgICAgIHNsdWc6IHRoaXMudHJhY2suc2x1ZyxcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiB0aGlzLnRyYWNrLmRldGFpbHNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5yZXNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgX25ld1Jlc291cmNlID0gZGIucmVzb3VyY2VzLnB1c2goKTtcbiAgICAgICAgICAgICAgICBfbmV3UmVzb3VyY2Uuc2V0KHtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2s6IHRoaXMudHJhY2suc2x1ZyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB0aGlzLnJlc291cmNlc1tpXS51cmxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goJy8nKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBlZGl0VHJhY2sgPSB7XG4gICAgdGVtcGxhdGU6ICcjVHJhY2snLFxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHJhY2s6IHt9LFxuICAgICAgICAgICAgcmVzb3VyY2VzOiB7fVxuICAgICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVSb3V0ZUVudGVyOiBmdW5jdGlvbih0bywgZnJvbSwgbmV4dCkge1xuICAgICAgICBkYi50cmFja3MuY2hpbGQodG8ucGFyYW1zLnNsdWcpLm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24odHJhY2spIHtcbiAgICAgICAgICAgIGlmICh0cmFjay52YWwoKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG5leHQoZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYi5yZXNvdXJjZXMub3JkZXJCeUNoaWxkKFwidHJhY2tcIikuZXF1YWxUbyh0by5wYXJhbXMuc2x1Zykub25jZSgndmFsdWUnLCBmdW5jdGlvbihyZXNvdXJjZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dChmdW5jdGlvbihzZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRyYWNrID0gdHJhY2sudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlc291cmNlcyA9IHJlc291cmNlcy52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgICAnJHJvdXRlJzogJ2ZldGNoRGF0YSdcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgZmV0Y2hEYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGRiLnRyYWNrcy5jaGlsZCh0aGlzLiRyb3V0ZS5wYXJhbXMuc2x1Zykub25jZSgndmFsdWUnLCBmdW5jdGlvbih0cmFjaykge1xuICAgICAgICAgICAgICAgIGlmICh0cmFjay52YWwoKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByb3V0ZXIucHVzaCgnLzQwNCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRiLnJlc291cmNlcy5vcmRlckJ5Q2hpbGQoXCJ0cmFja1wiKS5lcXVhbFRvKHRoaXMuJHJvdXRlLnBhcmFtcy5zbHVnKS5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHJlc291cmNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50cmFjayA9IHRyYWNrLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZXNvdXJjZXMgPSByZXNvdXJjZXMudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhZGRSZXNvdXJjZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX25ld1Jlc291cmNlID0ge1xuICAgICAgICAgICAgICAgIHRyYWNrOiB0aGlzLnRyYWNrLnNsdWdcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGRiLnJlc291cmNlcy5wdXNoKF9uZXdSZXNvdXJjZSkudGhlbihmdW5jdGlvbihzbmFwc2hvdCkge1xuICAgICAgICAgICAgICAgIHNlbGYucmVzb3VyY2VzID0gc2VsZi5yZXNvdXJjZXMgfHwge307XG4gICAgICAgICAgICAgICAgVnVlLnNldChzZWxmLnJlc291cmNlcywgc25hcHNob3Qua2V5LCBfbmV3UmVzb3VyY2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZVJlc291cmNlOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgZGIucmVzb3VyY2VzLmNoaWxkKGluZGV4KS5yZW1vdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIFZ1ZS5kZWxldGUoc2VsZi5yZXNvdXJjZXMsIGluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzYXZlUmVzb3VyY2U6IGZ1bmN0aW9uKGluZGV4LCByZXNvdXJjZSkge1xuICAgICAgICAgICAgZGIucmVzb3VyY2VzLmNoaWxkKGluZGV4KS51cGRhdGUoe1xuICAgICAgICAgICAgICAgIHVybDogcmVzb3VyY2UudXJsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2F2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkYi50cmFja3MuY2hpbGQodGhpcy4kcm91dGUucGFyYW1zLnNsdWcpLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy50cmFjay5uYW1lLFxuICAgICAgICAgICAgICAgIGRldGFpbHM6IHRoaXMudHJhY2suZGV0YWlsc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvJyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgcXVlc3Rpb25MaXN0ID0ge1xuICAgIHRlbXBsYXRlOiAnI1F1ZXN0aW9uTGlzdCcsXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBxdWVzdGlvbnM6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICAgICckcm91dGUnOiAnZmV0Y2hEYXRhJ1xuICAgIH0sXG4gICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZmV0Y2hEYXRhKClcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgZmV0Y2hEYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGRiLnF1ZXN0aW9ucy5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXN0aW9ucyA9IHNuYXBzaG90LnZhbCgpO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBxdWVzdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2hBbnN3ZXJzKHF1ZXN0aW9uc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZmV0Y2hBbnN3ZXJzKHF1ZXN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGRiLmFuc3dlcnMub3JkZXJCeUNoaWxkKCdxdWVzdGlvbicpLmVxdWFsVG8ocXVlc3Rpb24uc2x1Zykub25jZSgndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb24uYW5zd2VycyA9IHNuYXBzaG90LnZhbCgpIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5xdWVzdGlvbnMucHVzaChxdWVzdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgbmV3UXVlc3Rpb24gPSB7XG4gICAgdGVtcGxhdGU6ICcjUXVlc3Rpb24nLFxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcXVlc3Rpb246IHt9LFxuICAgICAgICAgICAgYW5zd2VyczogW3t9XVxuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFkZEFuc3dlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmFuc3dlcnMucHVzaCh7fSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZUFuc3dlcjogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuYW5zd2Vycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9LFxuICAgICAgICBzYXZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMucXVlc3Rpb24uc2x1ZyA9IGdlbmVyYXRlVVVJRCgpO1xuXG4gICAgICAgICAgICBkYi5xdWVzdGlvbnMuY2hpbGQodGhpcy5xdWVzdGlvbi5zbHVnKS5zZXQoe1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLnF1ZXN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIHNsdWc6IHRoaXMucXVlc3Rpb24uc2x1Z1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmFuc3dlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgX25ld0Fuc3dlciA9IGRiLmFuc3dlcnMucHVzaCgpO1xuICAgICAgICAgICAgICAgIF9uZXdBbnN3ZXIuc2V0KHtcbiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246IHRoaXMucXVlc3Rpb24uc2x1ZyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHRoaXMuYW5zd2Vyc1tpXS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tzOiB0aGlzLmFuc3dlcnNbaV0udHJhY2tzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvcXVlc3Rpb25zJyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgZWRpdFF1ZXN0aW9uID0ge1xuICAgIHRlbXBsYXRlOiAnI1F1ZXN0aW9uJyxcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHF1ZXN0aW9uOiB7fSxcbiAgICAgICAgICAgIGFuc3dlcnM6IHt9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZVJvdXRlRW50ZXI6IGZ1bmN0aW9uKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgICAgIGRiLnF1ZXN0aW9ucy5jaGlsZCh0by5wYXJhbXMuc2x1Zykub25jZSgndmFsdWUnLCBmdW5jdGlvbihxdWVzdGlvbikge1xuICAgICAgICAgICAgaWYgKHF1ZXN0aW9uLnZhbCgpID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV4dChmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRiLmFuc3dlcnMub3JkZXJCeUNoaWxkKFwicXVlc3Rpb25cIikuZXF1YWxUbyh0by5wYXJhbXMuc2x1Zykub25jZSgndmFsdWUnLCBmdW5jdGlvbihhbnN3ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQoZnVuY3Rpb24oc2VsZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5xdWVzdGlvbiA9IHF1ZXN0aW9uLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hbnN3ZXJzID0gYW5zd2Vycy52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgICAnJHJvdXRlJzogJ2ZldGNoRGF0YSdcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgZmV0Y2hEYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGRiLnF1ZXN0aW9ucy5jaGlsZCh0aGlzLiRyb3V0ZS5wYXJhbXMuc2x1Zykub25jZSgndmFsdWUnLCBmdW5jdGlvbihxdWVzdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvbi52YWwoKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByb3V0ZXIucHVzaCgnLzQwNCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRiLmFuc3dlcnMub3JkZXJCeUNoaWxkKFwicXVlc3Rpb25cIikuZXF1YWxUbyh0aGlzLiRyb3V0ZS5wYXJhbXMuc2x1Zykub25jZSgndmFsdWUnLCBmdW5jdGlvbihhbnN3ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnF1ZXN0aW9uID0gcXVlc3Rpb24udmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFuc3dlcnMgPSBhbnN3ZXJzLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkQW5zd2VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfbmV3QW5zd2VyID0ge1xuICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiB0aGlzLnF1ZXN0aW9uLnNsdWdcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGRiLmFuc3dlcnMucHVzaChfbmV3QW5zd2VyKS50aGVuKGZ1bmN0aW9uKHNuYXBzaG90KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hbnN3ZXJzID0gc2VsZi5hbnN3ZXJzIHx8IHt9O1xuICAgICAgICAgICAgICAgIFZ1ZS5zZXQoc2VsZi5hbnN3ZXJzLCBzbmFwc2hvdC5rZXksIF9uZXdBbnN3ZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZUFuc3dlcjogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGRiLmFuc3dlcnMuY2hpbGQoaW5kZXgpLnJlbW92ZSgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgVnVlLmRlbGV0ZShzZWxmLmFuc3dlcnMsIGluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzYXZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGRiLnF1ZXN0aW9ucy5jaGlsZCh0aGlzLiRyb3V0ZS5wYXJhbXMuc2x1ZykudXBkYXRlKHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogc2VsZi5xdWVzdGlvbi5kZXNjcmlwdGlvblxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGluZGV4IGluIHNlbGYuYW5zd2Vycykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2Fuc3dlciA9IHNlbGYuYW5zd2Vyc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGRiLmFuc3dlcnMuY2hpbGQoaW5kZXgpLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogX2Fuc3dlci5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrczogX2Fuc3dlci50cmFja3NcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZi4kcm91dGVyLnB1c2goJy9xdWVzdGlvbnMnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuVnVlLmNvbXBvbmVudCgnc2VsZWN0aXplLXZ1ZScsIHtcbiAgICB0ZW1wbGF0ZTogJzxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbCB1LWZ1bGwtd2lkdGggc2VsZWN0LXRyYWNrc1wiIHYtYmluZDp2YWx1ZT1cInZhbHVlXCIgcGxhY2Vob2xkZXI9XCJBZGQgdHJhY2tcIiB0eXBlPVwidGV4dFwiIHJlcXVpcmVkPicsXG4gICAgcHJvcHM6IFsndmFsdWUnXSxcbiAgICBjcmVhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBkYi50cmFja3Mub25jZSgndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuICAgICAgICAgICAgdmFyIHRyYWNrcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpIGluIHNuYXBzaG90LnZhbCgpKSB7XG4gICAgICAgICAgICAgICAgdHJhY2tzLnB1c2goc25hcHNob3QudmFsKClbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJChzZWxmLiRlbCkuc2VsZWN0aXplKHtcbiAgICAgICAgICAgICAgICBwZXJzaXN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtYXhJdGVtczogbnVsbCxcbiAgICAgICAgICAgICAgICB2YWx1ZUZpZWxkOiAnc2x1ZycsXG4gICAgICAgICAgICAgICAgbGFiZWxGaWVsZDogJ25hbWUnLFxuICAgICAgICAgICAgICAgIHNlYXJjaEZpZWxkOiBbJ25hbWUnLCAnZGV0YWlscyddLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHRyYWNrcyxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kZW1pdCgnaW5wdXQnLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG4gICAgfVxufSlcblxudmFyIG5vdEZvdW5kID0ge1xuICAgIHRlbXBsYXRlOiAnI05vdEZvdW5kJ1xufTtcblxuLy8gUm91dGVzXG5cbnZhciByb3V0ZXIgPSBuZXcgVnVlUm91dGVyKHtcbiAgICByb3V0ZXM6IFtcbiAgICAgICAgeyBuYW1lOiAnaG9tZScsIHBhdGg6ICcvJywgcmVkaXJlY3Q6ICcvdHJhY2tzJyB9LFxuICAgICAgICB7IG5hbWU6ICd0cmFja0xpc3QnLCBwYXRoOiAnL3RyYWNrcycsIGNvbXBvbmVudDogdHJhY2tMaXN0IH0sXG4gICAgICAgIHsgbmFtZTogJ25ld1RyYWNrJywgcGF0aDogJy90cmFja3MvbmV3JywgY29tcG9uZW50OiBuZXdUcmFjayB9LFxuICAgICAgICB7IG5hbWU6ICdlZGl0VHJhY2snLCBwYXRoOiAnL3RyYWNrcy86c2x1ZycsIGNvbXBvbmVudDogZWRpdFRyYWNrIH0sXG4gICAgICAgIHsgbmFtZTogJ3F1ZXN0aW9uTGlzdCcsIHBhdGg6ICcvcXVlc3Rpb25zJywgY29tcG9uZW50OiBxdWVzdGlvbkxpc3QgfSxcbiAgICAgICAgeyBuYW1lOiAnbmV3UXVlc3Rpb24nLCBwYXRoOiAnL3F1ZXN0aW9ucy9uZXcnLCBjb21wb25lbnQ6IG5ld1F1ZXN0aW9uIH0sXG4gICAgICAgIHsgbmFtZTogJ2VkaXRRdWVzdGlvbicsIHBhdGg6ICcvcXVlc3Rpb25zLzpzbHVnJywgY29tcG9uZW50OiBlZGl0UXVlc3Rpb24gfSxcbiAgICAgICAgeyBuYW1lOiAnNDA0JywgcGF0aDogJy80MDQnLCBjb21wb25lbnQ6IG5vdEZvdW5kIH1cbiAgICBdXG59KTtcblxuLy8gSW5pdGlhbGl6ZSBWdWVcblxudmFyIGFwcCA9IG5ldyBWdWUoeyByb3V0ZXI6IHJvdXRlciB9KS4kbW91bnQoJyNhcHAnKTtcblxuXG4vLyBVdGlsaXR5IGZ1bmN0aW9uc1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVVVSUQoKSB7XG4gICAgdmFyIGQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB2YXIgdXVpZCA9ICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24oYykge1xuICAgICAgICB2YXIgciA9IChkICsgTWF0aC5yYW5kb20oKSAqIDE2KSAlIDE2IHwgMDtcbiAgICAgICAgZCA9IE1hdGguZmxvb3IoZCAvIDE2KTtcbiAgICAgICAgcmV0dXJuIChjID09ICd4JyA/IHIgOiAociAmIDB4MyB8IDB4OCkpLnRvU3RyaW5nKDE2KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdXVpZDtcbn07XG4iXX0=
