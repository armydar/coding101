/*!
 * Coding101
 * Coding101 is a guide for people that want to learn how to code
 * https://github.com/devcenter-square/coding101
 * @author Devcenter
 * @version 0.0.1
 * Copyright 2016. MIT licensed.
 */
var config={apiKey:"AIzaSyA6mwwrGZLXTrPZcotadbPla7MfSNRyvU8",authDomain:"coding101-e7ef0.firebaseapp.com",databaseURL:"https://coding101-e7ef0.firebaseio.com",storageBucket:"coding101-e7ef0.appspot.com"};firebase.initializeApp(config);var TrackList=Vue.component("TrackList",{template:"#TrackList",data:function(){return{tracks:null}},watch:{$route:"fetchData"},created:function(){this.fetchData()},methods:{fetchData:function(){var e=this;firebase.database().ref("tracks").on("value",function(t){e.tracks=t.val()})}}}),NewTrack=Vue.component("NewTrack",{template:"#NewTrack",data:function(){return{track:{},resources:[{}]}},methods:{addResource:function(e){e.preventDefault(),this.resources.push({})},removeResource:function(e,t){t.preventDefault(),this.resources.splice(e,1)},create:function(){function e(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")}this.track.slug=e(this.track.name);var t=firebase.database().ref("tracks").push();for(t.set({name:this.track.name,slug:this.track.slug,details:this.track.details}),i=0;i<this.resources.length;i++){var a=firebase.database().ref("resources").push();a.set({track:this.track.slug,url:this.resources[i].url})}this.$router.push("/")}}}),ViewTrack=Vue.component("ViewTrack",{template:"#ViewTrack"}),QuestionList=Vue.component("QuestionList",{template:"#QuestionList"}),Question=Vue.component("Question",{template:"#Question"}),router=new VueRouter({routes:[{path:"/",redirect:"/tracks"},{path:"/tracks",component:TrackList},{path:"/tracks/new",component:NewTrack},{path:"/tracks/:slug",component:ViewTrack},{path:"/questions",component:QuestionList},{path:"/questions/:id",component:Question}]}),app=new Vue({router:router}).$mount("#app");
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJzdG9yYWdlQnVja2V0IiwiZmlyZWJhc2UiLCJpbml0aWFsaXplQXBwIiwiVHJhY2tMaXN0IiwiVnVlIiwiY29tcG9uZW50IiwidGVtcGxhdGUiLCJkYXRhIiwidHJhY2tzIiwid2F0Y2giLCIkcm91dGUiLCJjcmVhdGVkIiwidGhpcyIsImZldGNoRGF0YSIsIm1ldGhvZHMiLCIkdGhpcyIsImRhdGFiYXNlIiwicmVmIiwib24iLCJzbmFwc2hvdCIsInZhbCIsIk5ld1RyYWNrIiwidHJhY2siLCJyZXNvdXJjZXMiLCJhZGRSZXNvdXJjZSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJwdXNoIiwicmVtb3ZlUmVzb3VyY2UiLCJpbmRleCIsInNwbGljZSIsImNyZWF0ZSIsInNsdWdpZnkiLCJ0ZXh0IiwidG9TdHJpbmciLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJzbHVnIiwibmFtZSIsIl9uZXdUcmFjayIsInNldCIsImRldGFpbHMiLCJpIiwibGVuZ3RoIiwiX25ld1Jlc291cmNlIiwidXJsIiwiJHJvdXRlciIsIlZpZXdUcmFjayIsIlF1ZXN0aW9uTGlzdCIsIlF1ZXN0aW9uIiwicm91dGVyIiwiVnVlUm91dGVyIiwicm91dGVzIiwicGF0aCIsInJlZGlyZWN0IiwiYXBwIiwiJG1vdW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUtBLEdBQUFBLFNBQ0FDLE9BQUEsMENBQ0FDLFdBQUEsa0NBQ0FDLFlBQUEseUNBQ0FDLGNBQUEsOEJBR0FDLFVBQUFDLGNBQUFOLE9BZUEsSUFBQU8sV0FBQUMsSUFBQUMsVUFBQSxhQUNBQyxTQUFBLGFBQ0FDLEtBQUEsV0FDQSxPQUNBQyxPQUFBLE9BR0FDLE9BQ0FDLE9BQUEsYUFFQUMsUUFBQSxXQUNBQyxLQUFBQyxhQUVBQyxTQUNBRCxVQUFBLFdBQ0EsR0FBQUUsR0FBQUgsSUFFQVgsVUFBQWUsV0FBQUMsSUFBQSxVQUFBQyxHQUFBLFFBQUEsU0FBQUMsR0FDQUosRUFBQVAsT0FBQVcsRUFBQUMsWUFRQUMsU0FBQWpCLElBQUFDLFVBQUEsWUFDQUMsU0FBQSxZQUNBQyxLQUFBLFdBQ0EsT0FDQWUsU0FDQUMsaUJBR0FULFNBQ0FVLFlBQUEsU0FBQUMsR0FDQUEsRUFBQUMsaUJBQ0FkLEtBQUFXLFVBQUFJLFVBRUFDLGVBQUEsU0FBQUMsRUFBQUosR0FDQUEsRUFBQUMsaUJBQ0FkLEtBQUFXLFVBQUFPLE9BQUFELEVBQUEsSUFFQUUsT0FBQSxXQUNBLFFBQUFDLEdBQUFDLEdBQ0EsTUFBQUEsR0FBQUMsV0FBQUMsY0FDQUMsUUFBQSxPQUFBLEtBQ0FBLFFBQUEsWUFBQSxJQUNBQSxRQUFBLFNBQUEsS0FDQUEsUUFBQSxNQUFBLElBQ0FBLFFBQUEsTUFBQSxJQUVBeEIsS0FBQVUsTUFBQWUsS0FBQUwsRUFBQXBCLEtBQUFVLE1BQUFnQixLQUVBLElBQUFDLEdBQUF0QyxTQUFBZSxXQUFBQyxJQUFBLFVBQUFVLE1BT0EsS0FOQVksRUFBQUMsS0FDQUYsS0FBQTFCLEtBQUFVLE1BQUFnQixLQUNBRCxLQUFBekIsS0FBQVUsTUFBQWUsS0FDQUksUUFBQTdCLEtBQUFVLE1BQUFtQixVQUdBQyxFQUFBLEVBQUFBLEVBQUE5QixLQUFBVyxVQUFBb0IsT0FBQUQsSUFBQSxDQUNBLEdBQUFFLEdBQUEzQyxTQUFBZSxXQUFBQyxJQUFBLGFBQUFVLE1BQ0FpQixHQUFBSixLQUNBbEIsTUFBQVYsS0FBQVUsTUFBQWUsS0FDQVEsSUFBQWpDLEtBQUFXLFVBQUFtQixHQUFBRyxNQUlBakMsS0FBQWtDLFFBQUFuQixLQUFBLFNBS0FvQixVQUFBM0MsSUFBQUMsVUFBQSxhQUNBQyxTQUFBLGVBR0EwQyxhQUFBNUMsSUFBQUMsVUFBQSxnQkFDQUMsU0FBQSxrQkFHQTJDLFNBQUE3QyxJQUFBQyxVQUFBLFlBQ0FDLFNBQUEsY0FLQTRDLE9BQUEsR0FBQUMsWUFDQUMsU0FDQUMsS0FBQSxJQUFBQyxTQUFBLFlBQ0FELEtBQUEsVUFBQWhELFVBQUFGLFlBQ0FrRCxLQUFBLGNBQUFoRCxVQUFBZ0IsV0FDQWdDLEtBQUEsZ0JBQUFoRCxVQUFBMEMsWUFDQU0sS0FBQSxhQUFBaEQsVUFBQTJDLGVBQ0FLLEtBQUEsaUJBQUFoRCxVQUFBNEMsYUFNQU0sSUFBQSxHQUFBbkQsTUFBQThDLE9BQUFBLFNBQUFNLE9BQUEiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGFwcC5qcyB3aWxsIGJlIHRoZSBqYXZhc2NyaXB0IGZpbGVcbi8vIGZvciB0aGUgbWFpbiBhcHAgZnVuY3Rpb25zIChub24tZG9tKVxuXG4vLyBJbml0aWFsaXplIEZpcmViYXNlXG5cbnZhciBjb25maWcgPSB7XG4gICAgYXBpS2V5OiBcIkFJemFTeUE2bXd3ckdaTFhUclBaY290YWRiUGxhN01mU05SeXZVOFwiLFxuICAgIGF1dGhEb21haW46IFwiY29kaW5nMTAxLWU3ZWYwLmZpcmViYXNlYXBwLmNvbVwiLFxuICAgIGRhdGFiYXNlVVJMOiBcImh0dHBzOi8vY29kaW5nMTAxLWU3ZWYwLmZpcmViYXNlaW8uY29tXCIsXG4gICAgc3RvcmFnZUJ1Y2tldDogXCJjb2RpbmcxMDEtZTdlZjAuYXBwc3BvdC5jb21cIlxufTtcblxuZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcChjb25maWcpO1xuXG4vLyBTYW1wbGUgY29kZSB0byBjcmVhdGUgYSB0cmFjayBvbiBmaXJlYmFzZVxuXG4vLyB2YXIgX3RyYWNrcyA9IGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCd0cmFja3MnKTtcbi8vIHZhciBfbmV3VHJhY2sgPSBfdHJhY2tzLnB1c2goKTtcbi8vXG4vLyBfbmV3VHJhY2suc2V0KHtcbi8vICBuYW1lOiAnU2FtcGxlIFRyYWNrJyxcbi8vICBzbHVnOiAnc2FtcGxlLXRyYWNrJyxcbi8vICByZXNvdXJjZXM6IFtdXG4vLyB9KTtcblxuLy8gQ29tcG9uZW50c1xuXG52YXIgVHJhY2tMaXN0ID0gVnVlLmNvbXBvbmVudCgnVHJhY2tMaXN0Jywge1xuICAgIHRlbXBsYXRlOiAnI1RyYWNrTGlzdCcsXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0cmFja3M6IG51bGxcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgICAgJyRyb3V0ZSc6ICdmZXRjaERhdGEnXG4gICAgfSxcbiAgICBjcmVhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5mZXRjaERhdGEoKVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBmZXRjaERhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciB0cmFja3MgPSBbXTtcbiAgICAgICAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCd0cmFja3MnKS5vbigndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuICAgICAgICAgICAgICAgICR0aGlzLnRyYWNrcyA9IHNuYXBzaG90LnZhbCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cblxuICAgIH1cbn0pO1xuXG52YXIgTmV3VHJhY2sgPSBWdWUuY29tcG9uZW50KCdOZXdUcmFjaycsIHtcbiAgICB0ZW1wbGF0ZTogJyNOZXdUcmFjaycsXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0cmFjazoge30sXG4gICAgICAgICAgICByZXNvdXJjZXM6IFt7fV1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGRSZXNvdXJjZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLnJlc291cmNlcy5wdXNoKHt9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlUmVzb3VyY2U6IGZ1bmN0aW9uKGluZGV4LCBldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBzbHVnaWZ5KHRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dC50b1N0cmluZygpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xccysvZywgJy0nKSAvLyBSZXBsYWNlIHNwYWNlcyB3aXRoIC1cbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1teXFx3XFwtXSsvZywgJycpIC8vIFJlbW92ZSBhbGwgbm9uLXdvcmQgY2hhcnNcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcLVxcLSsvZywgJy0nKSAvLyBSZXBsYWNlIG11bHRpcGxlIC0gd2l0aCBzaW5nbGUgLVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXi0rLywgJycpIC8vIFRyaW0gLSBmcm9tIHN0YXJ0IG9mIHRleHRcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLy0rJC8sICcnKTsgLy8gVHJpbSAtIGZyb20gZW5kIG9mIHRleHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudHJhY2suc2x1ZyA9IHNsdWdpZnkodGhpcy50cmFjay5uYW1lKTtcblxuICAgICAgICAgICAgdmFyIF9uZXdUcmFjayA9IGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCd0cmFja3MnKS5wdXNoKCk7XG4gICAgICAgICAgICBfbmV3VHJhY2suc2V0KHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLnRyYWNrLm5hbWUsXG4gICAgICAgICAgICAgICAgc2x1ZzogdGhpcy50cmFjay5zbHVnLFxuICAgICAgICAgICAgICAgIGRldGFpbHM6IHRoaXMudHJhY2suZGV0YWlsc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZvciAoaT0wOyBpIDwgdGhpcy5yZXNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgX25ld1Jlc291cmNlID0gZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ3Jlc291cmNlcycpLnB1c2goKTtcbiAgICAgICAgICAgICAgICBfbmV3UmVzb3VyY2Uuc2V0KHtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2s6IHRoaXMudHJhY2suc2x1ZyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB0aGlzLnJlc291cmNlc1tpXS51cmxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnLycpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbnZhciBWaWV3VHJhY2sgPSBWdWUuY29tcG9uZW50KCdWaWV3VHJhY2snLCB7XG4gICAgdGVtcGxhdGU6ICcjVmlld1RyYWNrJ1xufSk7XG5cbnZhciBRdWVzdGlvbkxpc3QgPSBWdWUuY29tcG9uZW50KCdRdWVzdGlvbkxpc3QnLCB7XG4gICAgdGVtcGxhdGU6ICcjUXVlc3Rpb25MaXN0J1xufSk7XG5cbnZhciBRdWVzdGlvbiA9IFZ1ZS5jb21wb25lbnQoJ1F1ZXN0aW9uJywge1xuICAgIHRlbXBsYXRlOiAnI1F1ZXN0aW9uJ1xufSk7XG5cbi8vIFJvdXRlc1xuXG52YXIgcm91dGVyID0gbmV3IFZ1ZVJvdXRlcih7XG4gICAgcm91dGVzOiBbXG4gICAgICAgIHsgcGF0aDogJy8nLCByZWRpcmVjdDogJy90cmFja3MnIH0sXG4gICAgICAgIHsgcGF0aDogJy90cmFja3MnLCBjb21wb25lbnQ6IFRyYWNrTGlzdCB9LFxuICAgICAgICB7IHBhdGg6ICcvdHJhY2tzL25ldycsIGNvbXBvbmVudDogTmV3VHJhY2sgfSxcbiAgICAgICAgeyBwYXRoOiAnL3RyYWNrcy86c2x1ZycsIGNvbXBvbmVudDogVmlld1RyYWNrIH0sXG4gICAgICAgIHsgcGF0aDogJy9xdWVzdGlvbnMnLCBjb21wb25lbnQ6IFF1ZXN0aW9uTGlzdCB9LFxuICAgICAgICB7IHBhdGg6ICcvcXVlc3Rpb25zLzppZCcsIGNvbXBvbmVudDogUXVlc3Rpb24gfVxuICAgIF1cbn0pO1xuXG4vLyBJbml0aWFsaXplIFZ1ZVxuXG52YXIgYXBwID0gbmV3IFZ1ZSh7IHJvdXRlcjogcm91dGVyIH0pLiRtb3VudCgnI2FwcCcpO1xuIl19
