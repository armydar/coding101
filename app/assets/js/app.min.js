/*!
 * Coding101
 * Coding101 is a guide for people that want to learn how to code
 * https://github.com/devcenter-square/coding101
 * @author Devcenter
 * @version 0.0.1
 * Copyright 2016. MIT licensed.
 */
var config={apiKey:"AIzaSyA6mwwrGZLXTrPZcotadbPla7MfSNRyvU8",authDomain:"coding101-e7ef0.firebaseapp.com",databaseURL:"https://coding101-e7ef0.firebaseio.com",storageBucket:"coding101-e7ef0.appspot.com"};firebase.initializeApp(config);var db={tracks:firebase.database().ref("tracks"),resources:firebase.database().ref("resources")},trackList=Vue.component("trackList",{template:"#TrackList",data:function(){return{tracks:[]}},watch:{$route:"fetchData"},created:function(){this.fetchData()},methods:{fetchData:function(){var e=this;db.tracks.once("value",function(t){var a=t.val();for(var r in a){var s=a[r];s.resources={},db.resources.orderByChild("track").equalTo(s.slug).once("value",function(e){s.resources=e.val()}),e.tracks.push(s)}})}}}),newTrack=Vue.component("newTrack",{template:"#Track",data:function(){return{track:{},resources:[{}]}},methods:{addResource:function(){this.resources.push({})},removeResource:function(e){this.resources.splice(e,1)},save:function(){function e(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")}for(this.track.slug=e(this.track.name),db.tracks.child(this.track.slug).set({name:this.track.name,slug:this.track.slug,details:this.track.details}),i=0;i<this.resources.length;i++){var t=firebase.database().ref("resources").push();t.set({track:this.track.slug,url:this.resources[i].url})}this.$router.push("/")}}}),editTrack=Vue.component("editTrack",{template:"#Track",data:function(){return{track:{},resources:[{}]}},watch:{$route:"fetchData"},created:function(){this.fetchData()},methods:{fetchData:function(){var e=this;db.tracks.child(this.$route.params.slug).once("value",function(t){e.track=t.val()}),db.resources.orderByChild("track").equalTo(this.$route.params.slug).once("value",function(t){e.resources=t.val()})},addResource:function(){this.resources.push({})},removeResource:function(e){this.resources.splice(e,1)},saveResource:function(){db.resources.orderByValue(index).update({track:this.track.slug,url:this.resources.url})},save:function(){function e(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")}this.track.slug=e(this.track.name),db.tracks.child(this.$route.params.slug).update({name:this.track.name,slug:this.track.slug,details:this.track.details}),console.log(this.track.slug)}}}),questionList=Vue.component("questionList",{template:"#QuestionList"}),question=Vue.component("question",{template:"#Question"}),router=new VueRouter({routes:[{name:"home",path:"/",redirect:"/tracks"},{name:"trackList",path:"/tracks",component:trackList},{name:"newTrack",path:"/tracks/new",component:newTrack},{name:"editTrack",path:"/tracks/:slug",component:editTrack},{name:"questionList",path:"/questions",component:questionList},{name:"question",path:"/questions/:id",component:question}]}),app=new Vue({router:router}).$mount("#app");
//# sourceMappingURL=data:application/json;charset=utf8;base64,
