/*!
 * Coding101
 * Coding101 is a guide for people that want to learn how to code
 * https://github.com/devcenter-square/coding101
 * @author Devcenter
 * @version 0.0.1
 * Copyright 2016. MIT licensed.
 */
function slugify(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")}var config={apiKey:"AIzaSyA6mwwrGZLXTrPZcotadbPla7MfSNRyvU8",authDomain:"coding101-e7ef0.firebaseapp.com",databaseURL:"https://coding101-e7ef0.firebaseio.com",storageBucket:"coding101-e7ef0.appspot.com"};firebase.initializeApp(config);var db={tracks:firebase.database().ref("tracks"),resources:firebase.database().ref("resources")},trackList={template:"#TrackList",data:function(){return{tracks:[]}},watch:{$route:"fetchData"},created:function(){this.fetchData()},methods:{fetchData:function(){var e=this;db.tracks.once("value",function(t){var r=t.val();for(var a in r){var s=r[a];s.resources={},db.resources.orderByChild("track").equalTo(s.slug).once("value",function(e){s.resources=e.val()}),e.tracks.push(s)}})}}},newTrack={template:"#Track",data:function(){return{track:{},resources:[{}]}},methods:{addResource:function(){this.resources.push({})},removeResource:function(e){this.resources.splice(e,1)},save:function(){for(this.track.slug=slugify(this.track.name),db.tracks.child(this.track.slug).set({name:this.track.name,slug:this.track.slug,details:this.track.details}),i=0;i<this.resources.length;i++){var e=db.resources.push();e.set({track:this.track.slug,url:this.resources[i].url})}this.$router.push("/")}}},editTrack={template:"#Track",data:function(){return{track:{},resources:{}}},beforeRouteEnter:function(e,t,r){db.tracks.child(e.params.slug).once("value",function(t){db.resources.orderByChild("track").equalTo(e.params.slug).once("value",function(e){r(function(r){r.track=t.val(),r.resources=e.val()})})},function(){r(!1)})},watch:{$route:"fetchData"},methods:{fetchData:function(e){var t=this;db.tracks.child(e).once("value",function(e){db.resources.orderByChild("track").equalTo(this.$route.params.slug).once("value",function(r){t.track=e.val(),t.resources=r.val()})},function(){})},addResource:function(){var e=this,t={track:this.track.slug};db.resources.push(t).then(function(r){e.resources=e.resources||{},Vue.set(e.resources,r.key,t)})},removeResource:function(e){},saveResource:function(e,t){db.resources.child(e).update({url:t.url})},save:function(){this.track.slug=slugify(this.track.name),db.tracks.child(this.$route.params.slug).update({name:this.track.name,slug:this.track.slug,details:this.track.details}),this.$router.push("/")}}},questionList=Vue.component("questionList",{template:"#QuestionList"}),question=Vue.component("question",{template:"#Question"}),router=new VueRouter({routes:[{name:"home",path:"/",redirect:"/tracks"},{name:"trackList",path:"/tracks",component:trackList},{name:"newTrack",path:"/tracks/new",component:newTrack},{name:"editTrack",path:"/tracks/:slug",component:editTrack},{name:"questionList",path:"/questions",component:questionList},{name:"question",path:"/questions/:id",component:question}]}),app=new Vue({router:router}).$mount("#app");
//# sourceMappingURL=data:application/json;charset=utf8;base64,
